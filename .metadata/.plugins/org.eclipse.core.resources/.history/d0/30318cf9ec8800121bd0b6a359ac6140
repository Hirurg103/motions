import  javax.media.opengl.*;

import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.glu.GLU;
import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;

import static javax.media.opengl.GL.*;					// GL constants
import static javax.media.opengl.GL2.*;					// GL2 constants


public class HumanCanvas extends GLCanvas implements GLEventListener {
	
	// Setup OpenGL Graphics Renderer
	 
	private GLU glu;  // for the GL Utility
	 
	/** Constructor to setup the GUI for this Component */
	public HumanCanvas() {
		this.addGLEventListener(this);
	}
	 
	// ------ Implement methods declared in GLEventListener ------

	@Override
	public void display(GLAutoDrawable arg0) {
		
		
	}
	
	 /**
	 * Called back before the OpenGL context is destroyed. Release resource such as buffers.
	 */
	@Override
	public void dispose(GLAutoDrawable arg0) {
		
		
	}

	/**
	 * Called back immediately after the OpenGL context is initialized. Can be used
	 * to perform one-time initialization. Run only once.
	 */
	 @Override
	 public void init(GLAutoDrawable drawable) {
		 GL2 gl = drawable.getGL().getGL2();      		// get the OpenGL graphics context
		 glu = new GLU();                         		// get GL Utilities
	     gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f); 		// set background (clear) color
	     gl.glClearDepth(1.0f);      					// set clear depth value to farthest
	     gl.glEnable(GL_DEPTH_TEST); 					// enables depth testing
	     gl.glDepthFunc(GL_LEQUAL);  					// the type of depth test to do
	     gl.glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST); // best perspective correction
	     gl.glShadeModel(GL_SMOOTH); 					// blends colors nicely, and smoothes out lighting
	 
	      // ----- Your OpenGL initialization code here -----
	 }

	/**
	 * Call-back handler for window re-size event. Also called when the drawable is
	 * first set to visible.
	 */
	@Override
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
		GL2 gl = drawable.getGL().getGL2();  			// get the OpenGL 2 graphics context
 
		if (height == 0) height = 1;   					// prevent divide by zero
		float aspect = (float)width / height;
 
		// Set the view port (display area) to cover the entire window
		gl.glViewport(0, 0, width, height);
 
		// Setup perspective projection, with aspect ratio matches viewport
		gl.glMatrixMode(GL_PROJECTION);  				// choose projection matrix
		gl.glLoadIdentity();             				// reset projection matrix
		glu.gluPerspective(45.0, aspect, 0.1, 100.0); 	// fovy, aspect, zNear, zFar
		gl.glTranslatef(0, 0, -20);
		//gl.glRotatef(-30, 0, 1, 0);
		//gl.glRotatef(30, 1, 0, 0);
 
		// Enable the model-view transform
		gl.glMatrixMode(GL_MODELVIEW);
		gl.glLoadIdentity(); 							// reset
	}
}
