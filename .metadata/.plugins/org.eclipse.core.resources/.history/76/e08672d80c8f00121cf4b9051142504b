import java.nio.IntBuffer;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.media.opengl.GL2;
import types.Range;
import javax.vecmath.Vector3f;

import static javax.media.opengl.GL2.*;

public class HumanSkeleton {
	private SkeletonPart root;
	private ArrayList<SkeletonPart> skeletonParts;
	
	public HumanSkeleton(JPanel controlPanel) {
		this.root = new SkeletonPart("Shoulder", 1); skeletonParts.add(root);
		this.root.addRotateDimension(new RotateDimension("Down-Up", new Vector3f(0, 0, 1), new Range<Integer>(-90, 90)));
		this.root.addRotateDimension(new RotateDimension("Left-Right", new Vector3f(0, 1, 0), new Range<Integer>(-90, 90)));
	    SkeletonPart elbow = new SkeletonPart("Elbow", 0.8f); skeletonParts.add(elbow);
	    elbow.addRotateDimension(new RotateDimension("Bend-Unbend", new Vector3f(0, 0, 1), new Range<Integer>(0, 170)));
	    root.addChildPart(new Vector3f(this.root.getLength(), 0, 0), elbow);
	    
	    SkeletonPart elbow1 = new SkeletonPart("Elbow1", 0.8f); skeletonParts.add(elbow1);
	    elbow1.addRotateDimension(new RotateDimension("Bend-Unbend", new Vector3f(0, 0, 1), new Range<Integer>(0, 170)));
	    root.addChildPart(new Vector3f(this.root.getLength(), -1, 0), elbow1);
	    
	    SkeletonPart elbow2 = new SkeletonPart("Elbow2", 0.8f); skeletonParts.add(elbow2);
	    elbow2.addRotateDimension(new RotateDimension("Bend-Unbend", new Vector3f(0, 0, 1), new Range<Integer>(0, 170)));
	    root.addChildPart(new Vector3f(this.root.getLength(), -2, 0), elbow2);
	    
	}
	
	public HumanSkeleton() {
		this(null);
	}
	
	public void draw(GL2 gl) {
	    this.root.draw(gl);
	}
	
	public SkeletonPart getActiveSkeletonPart(GL2 gl, int x, int y) {
		root.draw(gl, true);
		IntBuffer viewPort = IntBuffer.allocate(4);
		gl.glGetIntegerv(GL_VIEWPORT, viewPort);
		IntBuffer pixelColor = IntBuffer.allocate(3);
		gl.glReadPixels(x, y, 1, 1, GL_RGB, GL_UNSIGNED_BYTE, pixelColor);
		System.out.println(pixelColor.get(0) + ", " + pixelColor.get(1) + ", " + pixelColor.get(2));
		return root;
	}
}
