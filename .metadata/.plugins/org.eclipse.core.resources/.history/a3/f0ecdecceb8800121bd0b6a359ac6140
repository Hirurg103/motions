import static javax.media.opengl.fixedfunc.GLMatrixFunc.GL_MODELVIEW;
import static javax.media.opengl.fixedfunc.GLMatrixFunc.GL_PROJECTION;

import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;

public class HumanCanvas extends GLCanvas implements GLEventListener {

	@Override
	public void display(GLAutoDrawable arg0) {
		
		
	}
	
	 /**
	 * Called back before the OpenGL context is destroyed. Release resource such as buffers.
	 */

	@Override
	public void dispose(GLAutoDrawable arg0) {
		
		
	}

	@Override
	public void init(GLAutoDrawable arg0) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * Call-back handler for window re-size event. Also called when the drawable is
	 * first set to visible.
	 */
	@Override
	public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
		GL2 gl = drawable.getGL().getGL2();  			// get the OpenGL 2 graphics context
 
		if (height == 0) height = 1;   					// prevent divide by zero
		float aspect = (float)width / height;
 
		// Set the view port (display area) to cover the entire window
		gl.glViewport(0, 0, width, height);
 
		// Setup perspective projection, with aspect ratio matches viewport
		gl.glMatrixMode(GL_PROJECTION);  				// choose projection matrix
		gl.glLoadIdentity();             				// reset projection matrix
		glu.gluPerspective(45.0, aspect, 0.1, 100.0); 	// fovy, aspect, zNear, zFar
		gl.glTranslatef(0, 0, -20);
		//gl.glRotatef(-30, 0, 1, 0);
		//gl.glRotatef(30, 1, 0, 0);
 
		// Enable the model-view transform
		gl.glMatrixMode(GL_MODELVIEW);
		gl.glLoadIdentity(); // reset
	}
	

}
