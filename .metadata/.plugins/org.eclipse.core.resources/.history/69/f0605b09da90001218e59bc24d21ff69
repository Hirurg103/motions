import java.util.ArrayList;
import java.util.HashMap; 

import javax.media.opengl.GL2;
import javax.vecmath.Color4b;
import javax.vecmath.Matrix4f;
import javax.vecmath.Vector3f;

import figures.Prism;


public class SkeletonPart extends GraphicsObject implements DimensionListener {
	private String name;
	private float length;
	private ArrayList<RotateDimension> rotateDimensions;
	private Prism bone;
	private ArrayList<SkeletonPart> childParts;
	private Matrix4f worldMatrix;
	private SkeletonPart root = null;
	private SkeletonPartPosition position;
	
	public SkeletonPart(String name, float length, SkeletonPartPosition position) {
		super();
		this.setName(name);
		this.setLength(length);
		this.rotateDimensions = new ArrayList<RotateDimension>();
		this.bone = new Prism(5, length, 0.2f);
		this.childParts = new ArrayList<SkeletonPart>();
		this.worldMatrix = new Matrix4f(); worldMatrix.set(1);
	}
	
	public SkeletonPart(String name, float length) {
		super();
		this.setName(name);
		this.setLength(length);
		this.rotateDimensions = new ArrayList<RotateDimension>();
		this.bone = new Prism(5, length, 0.2f);
		this.childParts = new ArrayList<SkeletonPart>();
		this.worldMatrix = new Matrix4f(); worldMatrix.set(1);
	}
	
	public SkeletonPart(String name) {
		this(name, 0);
	}
	
	public void draw(GL2 gl) {
		draw(gl, false);
	}
	
	public void draw(GL2 gl, boolean withMyColorID) {
		if(withMyColorID) {
			// object will draw with color 
			gl.glColor4b(myColorID.getX(), myColorID.getY(), myColorID.getZ(), myColorID.getW());
		} else {
			// set other graphics parameters
		}
		for(RotateDimension rotateDimension : rotateDimensions) {
			gl.glRotatef(rotateDimension.getAngle(), rotateDimension.getAxis().getX(), rotateDimension.getAxis().getY(), rotateDimension.getAxis().getZ());
		}
		bone.draw(gl);
		
		for(SkeletonPartPosition place : childParts.keySet()) {
			gl.glPushMatrix();
			gl.glTranslatef(getLength()*place.getRelativeX(), place.getY(), place.getZ());
			if(place.getInitRotY() != 0) gl.glRotatef(place.getY(), 0, 1, 0);
			if(place.getInitRotZ() != 0) gl.glRotatef(place.getZ(), 0, 0, 1);
			childParts.get(place).draw(gl, withMyColorID);
			gl.glPopMatrix();
		}
	}
		
	public void addRotateDimension(RotateDimension rotateDimension) {
		rotateDimensions.add(rotateDimension);
		rotateDimension.addDimensionListener(this);
		dimensionChanged(rotateDimension);
	}
	
	public ArrayList<RotateDimension> getRotateDimensions() { return this.rotateDimensions; }

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public void addChildPart(final Vector3f place, SkeletonPart childPart) {
		childParts.put(place, childPart);
		childPart.setRoot(this);
	}

	public float getLength() {
		return length;
	}

	public void setLength(float length) {
		this.length = length;
	}

	public SkeletonPart getRoot() {
		return root;
	}

	public void setRoot(SkeletonPart root) {
		this.root = root;
	}
	
	public Matrix4f getWorldMatrx() {
		return worldMatrix;
	}
	
	public SkeletonPart getWithColor(Color4b pixelColor) {
		if(this.myColorID.equals(pixelColor)) {
			return this;
		}
		SkeletonPart selectedPart;
		for(Vector3f location: childParts.keySet()) {
			if((selectedPart = childParts.get(location).getWithColor(pixelColor)) != null) {
				return selectedPart;
			}
		}
		return null;
	}

	@Override
	public void dimensionChanged(BaseDimension dimension) {
		if(root != null) { worldMatrix = root.getWorldMatrx(); } else { worldMatrix.set(1); } 
	    for(RotateDimension rotateDimension: rotateDimensions) {
	    	worldMatrix.mul(rotateDimension.getRotationMatrix());
	    }
	    for(Vector3f place: childParts.keySet()) {
	    	childParts.get(place).dimensionChanged(dimension);
	    }
	}

	public SkeletonPartPosition getPosition() { return position; }

	public void setPosition(SkeletonPartPosition position) { this.position = position;	}
}
